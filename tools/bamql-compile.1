.\" Authors: Paul Boutros and Lab Members
.TH bamql-compile 1 "Dec 2014" "1.0" "USER COMMANDS"
.SH NAME 
bamql-compile \- Compile BAMQL queries to object code.
.SH SYNOPSIS
.B bamql-compile
[
.B \-d
] [
.B \-g
] [
.B \-o
.I output.o
] [
.B \-H
.I output.h
]
.I queryfile.bamql
.SH DESCRIPTION
BAMQL filters SAM or BAM files using a simple query language that is more expressive than the
.B view
options available in
.BR samtools (1).
The query language is described in
.BR bamql_queries (7).

This compiler allows generating object code usable from C or C++ to perform the same filtering as a query. The generated code follows C convections, to match
.B HTSLib
which also must be included. On standard output, a sample header file will be generated.

To make use of this function,
.IP 1.
Write a file containing queries that should be available to the C/C++ program.
.IP 2.
Compile the query file.
.IP 3.
Write a C program that uses
.B HTSLib 
to open a BAM/SAM file and the selected reads and the header file generated.
.IP 4.
Compile the C program as usual.
.IP 5.
Link, including the generated object code from the second step, all the object code from the C program, and appropriate flags for the
.B HTSLib
library and
.B bamql-rt
which contains the BAMQL runtime.

.BR pkg-config (1)
is recommened to get the correct flags using the packages:
.B bamql-rt
For example:

.RS
bamql-compile queries.bamql
.br
cc -o myprog main.c queries.o $(pkg-config --cflags --libs bamql-rt)
.RE

If using
.BR automake (1),
a suffix rule as follows will allow adding
.BR .bamql
files to
.BR _SOURCES
:

.RS
\[char46]bamql.o:
        bamql-compile -o $@ $<
.RE

.SH OPTIONS
.TP
\-d
Dump the LLVM bit-code to the console for inspection. This is only useful if the generated code is broken.
.TP
\-g
Write debugging symbols to the output. This will allow a debugger to produce sensible stack traces.
.TP
\-H output.h
The file containing the generated C header. It none is specified, it is the input file name, suffixed with \fB.h\fR.
.TP
\-o output.o
The file containing the generated object code. It none is specified, it is the input file name, suffixed with \fB.o\fR.

.SH QUERY FILE FORMAT
The query file is an optional list of external declarations:

.B extern
.I name
.B ;

followed by a list of queries, in the following format:

.I name
.B =
.I query
.B ;

Whitespace is ignored, per usual conventions. The correspoding C function will be exported as \fIname\fR, so this must be a valid C function name.

Queries can make use of previously defined queries. For example:

.B a = paired? & chr(1);
.br
.B b = a & nt(50, A);

.SH EXTERNAL DECLARATIONS
All functions generated and consumed by the compiler will have the same signature:

.B bool (*)(bam_hdr_t*, bam1_t*);

and for the \fB_index\fR variant:

.B bool (*)(bam_hdr_t*, uint32_t);

If new functions are required for a query, they can be written in C with the above signature and given appropriate
.B extern
declaration in the file.

.SH SEE ALSO
.BR bamql (1),
.BR bamql_queries (7),
.BR samtools (1).
