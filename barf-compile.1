.\" Authors: Paul Boutros and Lab Members
.TH barf-compile 1 "Dec 2014" "1.0" "USER COMMANDS"
.SH NAME 
barf-compile \- Compile BARF queries to object code.
.SH SYNOPSIS
.B barf-compile
[
.B \-d
] [
.B \-n 
.I name
] [
.B \-o
.I output.bc
]
.I query
.SH DESCRIPTION
BARF filters SAM or BAM files using a simple query language that is more expressive than the
.B view
options available in
.BR samtools (1).
The query language is described in
.BR barf_queries (7).

This compiler allows generating object code usable from C or C++ to perform the same filtering as a query. The generated code follows C convections, to match
.B HTSLib
which also must be included. On standard output, a sample header file will be generated.

To make use of this function,
.IP 1.
Compile the query to LLVM bit-code with the desired function name.
.IP 2.
Write a header file based on the output suitable to your needs. It is likely that a well-placed function signature is all that is needed.
.IP 3.
Write a C program that uses
.B HTSLib 
to open a BAM/SAM file and the selected reads and the header to the function.
.IP 4.
Compile the C program as usual.
.IP 5.
Link, using
.BR llvm-ld (1)
the generated bit-code from the first step, all the object code from the C program, and appropriate flags for the
.B HTSLib
library.

.SH OPTIONS
.TP
\-d
Dump the LLVM bit-code to the console for inspection. This is only useful if the generated code is broken.
.TP
\-n name
The name of the generated function. If none is specified, it will be
.I filter
which maybe unhelpful if developing a library or multiple 
.TP
\-o output.bc
The file containing the generated bitcode. It none is specified, it is the filter name, suffixed with \fB.bc\fR.
.TP
.SH SEE ALSO
.BR barf (1),
.BR barf_queries (7),
.BR samtools (1).
